[
  {
    ".method::int": 2,
    "Card": {
      "Created::dtm": "2020-07-13T12:33:27.617Z",
      "CreatedByID::uid": "3db19fa0-228a-497f-873a-0250bf0a4ccb",
      "CreatedByName": "Admin",
      "Files": [
        {
          ".flags::int": 0,
          ".state::int": 4,
          ".versionsLoaded": false,
          "Card": {
            "Created::dtm": "2020-07-13T12:33:27.617Z",
            "CreatedByID::uid": "3db19fa0-228a-497f-873a-0250bf0a4ccb",
            "CreatedByName": "Admin",
            "Flags::int": 0,
            "ID::uid": "a73f73ca-dece-472a-8a59-a3a1e5ef5a16",
            "Info": null,
            "Modified::dtm": "2020-07-13T12:33:27.617Z",
            "ModifiedByID::uid": "3db19fa0-228a-497f-873a-0250bf0a4ccb",
            "ModifiedByName": "Admin",
            "Permissions": null,
            "Sections": null,
            "TypeCaption": "$CardTypes_TypesNames_File",
            "TypeID::uid": "ab387c69-fd62-0655-bbc3-b879e433a143",
            "TypeName": "File",
            "Version::int": 67
          },
          "CategoryCaption": null,
          "CategoryID": null,
          "ExternalSource": null,
          "Hash": null,
          "Info": null,
          "IsVirtual": false,
          "Name": "{$ApprovalHistory_Name_Default}.html",
          "NewVersionTags": null,
          "Options": null,
          "OriginalFileID": null,
          "OriginalVersionRowID": null,
          "RequestInfo": null,
          "RowID::uid": "a73f73ca-dece-472a-8a59-a3a1e5ef5a16",
          "SectionRows": null,
          "Size": 31538,
          "StoreSource::int": 1,
          "TaskID": null,
          "TypeCaption": "$CardTypes_TypesNames_File",
          "TypeID::uid": "ab387c69-fd62-0655-bbc3-b879e433a143",
          "TypeName": "File",
          "VersionNumber::int": 67,
          "VersionRowID::uid": "7fc21a9f-dc3e-44a6-859c-cd4fdebeaa96",
          "Versions": null
        }
      ],
      "Flags::int": 0,
      "ID::uid": "9cf3a99f-3818-4176-b1d5-df44a2217160",
      "Info": null,
      "Modified::dtm": "2020-07-13T12:33:27.617Z",
      "ModifiedByID::uid": "3db19fa0-228a-497f-873a-0250bf0a4ccb",
      "ModifiedByName": "Admin",
      "Permissions": null,
      "Sections": {
        "FileTemplateRoles": {
          ".table::int": 1,
          "Rows": [
            {
              "RoleID::uid": "11111111-1111-1111-1111-111111111111",
              "RoleName": "System",
              "RowID::uid": "28e33c9a-26a3-47a6-b8c6-f92b67808802"
            }
          ]
        },
        "FileTemplates": {
          "Fields": {
            "AfterDocumentReplace": "",
            "AfterPlaceholderReplace": null,
            "AfterRowReplace": null,
            "AfterTableReplace": null,
            "AliasMetadata": null,
            "BeforeDocumentReplace": null,
            "BeforePlaceholderReplace": null,
            "BeforeRowReplace": null,
            "BeforeTableReplace": null,
            "GroupName": "$ApprovalHistory_Name_Default",
            "Name": "$ApprovalHistory_Name_Default",
            "System": true,
            "TypeID::int": 0,
            "TypeName": "$FileTemplateType_Card"
          }
        },
        "FileTemplateTypes": {
          ".table::int": 1,
          "Rows": null
        },
        "FileTemplateViews": {
          ".table::int": 1,
          "Rows": null
        }
      },
      "TaskHistory": null,
      "TaskHistoryGroups": null,
      "Tasks": null,
      "Topics": null,
      "TypeCaption": "$CardTypes_TypesNames_FileTemplate",
      "TypeID::uid": "b7e1b93e-eeda-49b7-9402-2471d4d14bdf",
      "TypeName": "FileTemplate",
      "Version::int": 0
    },
    "FileMapping": null,
    "Info": {
      ".importVersion::int": 8
    }
  },
  {
    ".id::uid": "a73f73ca-dece-472a-8a59-a3a1e5ef5a16",
    ".size": 31538,
    "Content::bin": ""
  }
]