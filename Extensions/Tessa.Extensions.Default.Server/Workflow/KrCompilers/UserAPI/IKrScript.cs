using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Tessa.Cards;
using Tessa.Cards.Caching;
using Tessa.Cards.Extensions;
using Tessa.Cards.Workflow;
using Tessa.Extensions.Default.Server.Workflow.KrObjectModel;
using Tessa.Extensions.Default.Server.Workflow.KrProcess;
using Tessa.Extensions.Default.Server.Workflow.KrProcess.Scope;
using Tessa.Extensions.Default.Server.Workflow.KrProcess.Serialization;
using Tessa.Extensions.Default.Server.Workflow.KrProcess.Workflow;
using Tessa.Extensions.Default.Shared;
using Tessa.Extensions.Default.Shared.Workflow;
using Tessa.Extensions.Default.Shared.Workflow.KrCompilers;
using Tessa.Extensions.Default.Shared.Workflow.KrProcess;
using Tessa.Platform;
using Tessa.Platform.Collections;
using Tessa.Platform.Data;
using Tessa.Platform.Runtime;
using Tessa.Platform.Storage;
using Tessa.Platform.Validation;
using Unity;

namespace Tessa.Extensions.Default.Server.Workflow.KrCompilers.UserAPI
{
    /// <summary>
    /// Интерфейс собирает в себе все доступные свойства и методы в скриптах подсистемы маршрутов.
    /// Для каждого свойства/метода приведено описание, а также контексты, в которых доступен данный член.
    /// Если в описании не указан контекст, в котором допустимо использовать, значит свойство/метод допустимо использовать в любом контексте. <para />
    /// 
    /// Виды скриптов: <para />
    /// * Скрипт выполнения этапа - скрипты, находящиеся в строке этапа в шаблоне этапов. Запускаются в процессе выполнения;<para />
    /// * Скрипт построения шаблона этапов - скрипты на основной вкладке шаблона этапов. Запускаются при построении маршрута;<para />
    /// * Скрипт построения группы этапов - скрипты на основной вкладке группы этапов. Запускаются при построении маршрута;<para />
    /// * Скрипт выполнения группы этапов  - скрипты на основной вкладке группы этапов. Запускаются при выполнении маршрута;<para />
    /// * Скрипт видимости кнопки процесса - скрипты на основной вкладке кнопки процесса. Запускаются при загрузке карточки, включенной в типовой процесс;<para />
    /// * Скрипт выполнения процесса - скрипты на основной вкладке процесса. Запускаются при запуске вторичного процесса;<para />
    ///
    /// Режимы: <para />
    /// * Синхронный режим - процесс запускается полностью в памяти. Создание процессного сателлита не происходит;<para />
    /// * Асинхронный режим - процесс запускается с заполнением процессного сателлита. Для основного процесса
    ///                       контекстуальный и процессный сателлит совпадают, для вторичных создаются отдельные KrSecondarySatellite;<para />
    ///
    /// Контексты запуска: <para />
    /// * Глобальный - процесс запускается без карточки. Такой процесс может быть только синхронным.
    ///                Например, нажатие на кнопку процесса в правой панели. <para />
    /// * Локальный - процесс запускается по карточке. Это основной процесс и кнопки процесса в левой панели. <para />
    /// 
    /// </summary>
    public interface IKrScript : ISealable, IKrProcessItemScript, IKrProcessExecutionScript, IKrProcessVisibilityScript, IContextChangeableScript
    {
        #region context

        /// <summary>
        /// Идентификатор текущего процесса.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Guid? ProcessID { get; set; }

        /// <summary>
        /// Тип текущего процесса.
        /// </summary>
        /// <remarks>
        /// Значения:
        /// * <see cref="KrConstants.KrProcessName"/>
        /// * <see cref="KrConstants.KrSecondaryProcessName"/>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        string ProcessTypeName { get; set; }

        /// <summary>
        /// Причина запуска обработчика процесса.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// * Глобальный;<para />
        /// </remarks>
        KrProcessRunnerInitiationCause InitiationCause { get; set; }

        /// <summary>
        /// Контекстуальный сателлит <see cref="DefaultCardTypes.KrSatelliteTypeID"/> текущей карточки.
        /// Данный сателлит является основным сателлитом для карточки в подсистеме маршрутов, содержит состояние карточки и инициатора,
        /// а также маршрут для вкладки "Маршруты" (т.е. контекстуальный сателлит по совместительству процессный для основного процесса).
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Card ContextualSatellite { get; set; }

        /// <summary>
        /// Процессный сателлит для текущего процесса.
        /// Процессный сателлит содержит в себе список этапов с секции KrStages с состояниями и настройками.
        /// Для основного процесса процессный сателлит совпадает с контекстуальным
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Card ProcessHolderSatellite { get; set; }

        /// <summary>
        /// Информация о конфигурации текущего вторичного процесса.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IKrSecondaryProcess SecondaryProcess { get; set; }

        /// <summary>
        /// Информация о конфигурации текущего вторичного процесса.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IKrPureProcess PureProcess { get; }

        /// <summary>
        /// Кнопка, по нажатию на которую был запущен текущий процесс.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IKrProcessButton Button { get; }

        /// <summary>
        /// Информация о конфигурации текущего действия.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IKrAction Action { get; }

        /// <summary>
        /// ID группы этапов для текущего скрипта.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        Guid StageGroupID { get; set; }

        /// <summary>
        /// Название текущей группы этапов.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        string StageGroupName { get; set; }

        /// <summary>
        /// Порядок сортировки текущей группы этапов.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        int StageGroupOrder { get; set; }

        /// <summary>
        /// Идентификатор текущего шаблона этапов.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        Guid TemplateID { get; set; }

        /// <summary>
        /// Название текущего шаблона этапов.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        string TemplateName { get; set; }

        /// <summary>
        /// Порядок сортировки шаблона этапов.
        /// <c>-1</c> если выполнение происходит без конкретного шаблона.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        int Order { get; set; }

        /// <summary>
        /// Положение отностельно этапов, расположенных вручную.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        GroupPosition Position { get; set; }

        /// <summary>
        /// Можно ли менять порядок этапов шаблона.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        bool CanChangeOrder { get; set; }

        /// <summary>
        /// Можно ли менять настройки этапов в шаблоне.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        bool IsStagesReadonly { get; set; }

        /// <summary>
        /// Контейнер этапов, выполняющий составление маршрута и сортировку маршрутов при пересчете.
        /// Использовать в скриптах напрямую не рекомендуется.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        StagesContainer StagesContainer { get; set; }

        /// <summary>
        /// Объектная модель текущего процесса.
        /// Содержит полное представление процесса, основанное на контекстальном и процессном сателлитах.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный
        /// </remarks>
        WorkflowProcess WorkflowProcess { get; set; }

        /// <summary>
        /// Набор этапов на момент начала текущей обработки запроса подсистемой маршрутов.
        /// Используется для поиска изменений в маршруте за время обработки запроса.
        /// Использовать в скриптах напрямую не рекомендуется.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный
        /// </remarks>
        SealableObjectList<Stage> InitialStages { get; }

        /// <summary>
        /// Список этапов в маршруте.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        SealableObjectList<Stage> Stages { get; }

        /// <summary>
        /// Подмножество этапов, относящееся только к текущему скрипту.
        /// Для скрипта выполнения этапа этапа - это коллекция из одного текущего этапа.
        /// Для скрипта построения шаблона этапов - это коллекция из всех этапов текущего шаблона.
        /// Для скрипта построения и выполнения группы этапов - это коллекция из все этапов текущей группы.
        /// Коллекция является неизменяемой. Если необходимо добавить этап, то следует воспользоваться методов <see cref="AddStage"/>.
        /// В случае, когда нужно удалить этап, достаточно выполнить <c>Stages.RemoveAll(Predicate);</c>
        /// Этапы в данной коллекции являются изменяемыми.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        ReadOnlyCollection<Stage> CurrentStages { get; }

        /// <summary>
        /// Текущий этап.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        Stage Stage { get; set; }

        /// <summary>
        /// Номер текущего цикла.
        /// Является прокси-свойством для поля в ProcessInfo.Cycle основного процесса.
        /// В вторичных процессах каждое обращение вызывает десериализацию/сериализацию состояния основного процесса,
        /// поэтому следует минимизировать обращения к данному полю.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        int Cycle { get; set; }

        /// <summary>
        /// Инициатор (автора) процесса.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Author Initiator { get; set; }

        /// <summary>
        /// Комментарий инициатора.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        string InitiatorComment { get; set; }

        /// <summary>
        /// Стратегия загрузки основной карточки.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        IMainCardAccessStrategy MainCardAccessStrategy { get; set; }

        /// <summary>
        /// Полный объект текущей карточки документа.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Card CardObject { get; }

        /// <summary>
        /// Информация о процессе из WorkflowAPI.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        IWorkflowProcessInfo WorkflowProcessInfo { get; set; }
        
        /// <summary>
        /// Информация о задании из WorkflowAPI.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        IWorkflowTaskInfo WorkflowTaskInfo { get; }

        /// <summary>
        /// Информация о сигнале из WorkflowAPI.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        IWorkflowSignalInfo WorkflowSignalInfo { get; }

        /// <summary>
        /// Идентификатор текущей картчоки документа.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Guid CardID { get; set; }

        /// <summary>
        /// Идентификатор типа текущей карточки документа.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Guid CardTypeID { get; set; }

        /// <summary>
        /// Название типа текущей карточки документа.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        string CardTypeName { get; set; }

        /// <summary>
        /// Отображаемое название типа текущей карточки документа.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        string CardTypeCaption { get; set; }

        /// <summary>
        /// Идентификатор типа документа для текущей карточки, если тип карточки поддерживает типы документов
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Guid DocTypeID { get; set; }

        /// <summary>
        /// Эффективный идентификатор типа. Это тип документа, если типы документов включены для типа карточки, иначе тип карточки.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Guid TypeID { get; }

        /// <summary>
        /// Включенные настройки типового решения для текущий карточки
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        KrComponents KrComponents { get; set; }

        /// <summary>
        /// Версия карточки.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        int Version { get; }

        /// <summary>
        /// Карточка документа.
        /// Dynamic-обертка над строковыми секциями.
        /// Может использоваться для простого и лаконичного обращения к строковым секциями.<para />
        /// Например:<para />
        /// <c>Card.DocumentCommonInfo.Amount</c><para />
        /// <c>Card.MyCustomSection.CustomField</c><para />
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        dynamic Card { get; }

        /// <summary>
        /// Карточка документа.
        /// Dynamic-обертка над коллекционными секциями.
        /// Может использоваться для простого и лаконичного обращения к коллекционным секциями.<para />
        /// Например:<para />
        /// <c>Card.Performers[0].UserID</c>
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        dynamic CardTables { get; }

        /// <summary>
        /// Список файлов карточки.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        ListStorage<CardFile> Files { get; }

        /// <summary>
        /// Контекст расширения, в рамках которого выполняется этап.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        ICardExtensionContext CardContext { get; set; }

        /// <summary>
        /// Результат валидации текущей обработки запроса.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IValidationResultBuilder ValidationResult { get; set; }

        /// <summary>
        /// Произвольное хранилище для пользовательских данных.
        /// Не является персистентным хранилищем, срок жизни не регламентируется.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IDictionary<string, object> Info { get; }

        /// <summary>
        /// Состояние(Info) текущего этапа.
        /// Представляет из себя персистентное хранилище произвольных данных об этапе.
        /// Может использоваться скриптами и обработчиком этапа для хранения данных между вызовами.
        /// Пример использования:
        /// <c>StageInfoStorage["CustomField"] = 5</c> 
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IDictionary<string, object> StageInfoStorage { get; }

        /// <summary>
        /// Состояние(Info) текущего этапа.
        /// Представляет из себя персистентное хранилище произвольных данных об этапе.
        /// Может использоваться скриптами и обработчиком этапа для хранения данных между вызовами.
        /// Пример использования:
        /// <c>StageInfo.CustomField = 5</c> 
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        dynamic StageInfo { get; }

        /// <summary>
        /// Состояние(Info) процесса.
        /// Представляет из себя персистентное хранилище произвольных данных о процессе.
        /// Может использоваться различными этапами для взаимодействия между собой.
        /// Пример использования:
        /// <c>ProcessInfoStorage["CustomField"] = 5</c> 
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IDictionary<string, object> ProcessInfoStorage { get; }

        /// <summary>
        /// Состояние(Info) процесса.
        /// Представляет из себя персистентное хранилище произвольных данных о процессе.
        /// Может использоваться различными этапами для взаимодействия между собой.
        /// Пример использования:
        /// <c>ProcessInfo.CustomField = 5</c> 
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        dynamic ProcessInfo { get; }

        /// <summary>
        /// Идентификатор текущей группы истории заданий.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        Guid? CurrentTaskHistoryGroup { get; }

        
        /// <summary>
        /// Получение хранилища Info для основного процесса текущей карточки.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        IDictionary<string, object> MainProcessInfoStorage { get; }
        
        /// <summary>
        /// Получение хранилища Info для основного процесса текущей карточки.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        dynamic MainProcessInfo { get; }
        
        /// <summary>
        /// Получить строковые секции в dynamic обертке из карточки из Info этапа по ключу <see cref="KrConstants.Keys.NewCard"/>.
        /// </summary>
        /// <returns></returns>/// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// * Глобальный;<para />
        /// </remarks>
        dynamic NewCard { get; }
        
        /// <summary>
        /// Получить коллекционные секции в dynamic обертке из карточки из Info этапа по ключу <see cref="KrConstants.Keys.NewCard"/>.
        /// </summary>
        /// <returns></returns>/// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// * Глобальный;<para />
        /// </remarks>
        dynamic NewCardTables { get; }

        #endregion

        #region lifecycle

        /// <summary>
        /// Признак того, что выполняемый элемент подтвержден условием построения.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        bool Confirmed { get; set; }

        /// <summary>
        /// Текущее выполняемое действие.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        KrScriptType KrScriptType { get; set; }

        #endregion

        #region dependencies

        /// <summary>
        /// Сессия текущего пользователя. Используйте <c>Session.User.ID</c>, чтобы получить идентификатор текущего пользователя.
        /// </summary>
        ISession Session { get; set; }

        /// <summary>
        /// Объект, обеспечивающий доступ к базам данных. Позволяет открывать соединение к другим БД:
        /// <c>using (DbScope.CreateNew("connectionAlias")) { ... }</c>.
        /// Также определяет тип СУБД, которая используется системой: <c>DbScope.Dbms</c>.
        /// Вместо вызова <c>DbScope.Db</c> для простоты рекомендуется использоваться свойство <see cref="Db"/>.
        /// </summary>
        IDbScope DbScope { get; set; }

        /// <summary>
        /// Объект, используемый для выполнения SQL-запросов к текущей БД. По умолчанию уже открыто соединение к основной БД системы,
        /// но посредством вызова <c>using (DbScope.CreateNew("connectionAlias")) { ... }</c> можно изменить базу данных, доступную по свойству <see cref="Db"/>,
        /// может быть изменена.
        ///
        /// Пример выполнения запроса:
        /// <c>int result = Db.SetCommand("select @Result", Db.Parameter("Result", 42)).LogCommand().ExecuteScalar&lt;int&gt;()</c>.
        ///
        /// Следует учесть, что <c>Db.Parameter("Result", 0)</c> ведет себя нелогично и определит параметр типа nvarchar со значением DbNull,
        /// т.к. будет использована некорректная перегрузка метода <c>Db.Parameter()</c>. В связи с этим добавьте преобразование типа значения к object:
        /// <c>Db.Parameter("Result", (object)0)</c>.
        /// </summary>
        DbManager Db { get; }

        /// <summary>
        /// IoC-контейнер для получения любых необходимых зависимостей в рамках системы.
        /// Для более удобного использования есть метод <c>Resolve&lt;T&gt;</c>, о котором написано ниже. Пример использования:
        /// <c>var cardRepository = UnityContainer.Resolve&lt;ICardRepository&gt;()</c>.
        /// </summary>
        IUnityContainer UnityContainer { get; set; }

        /// <summary>
        /// Содержит метаинформацию, необходимую для использования типов карточек совместно с пакетом карточек.
        /// </summary>
        ICardMetadata CardMetadata { get; set; }

        /// <summary>
        /// Объект для работы с текущим контекстом расширений типового расширения и
        /// использования разделяемых объектов карточек.
        /// </summary>
        IKrScope KrScope { get; set; }

        /// <summary>
        /// Потокобезопасный кэш с карточками и дополнительными настройками.
        /// </summary>
        ICardCache CardCache { get; set; }

        /// <summary>
        /// Кэш по типам карточек и документов, содержащих информацию по типовому решению.
        /// </summary>
        IKrTypesCache KrTypesCache { get; set; }

        /// <summary>
        /// Текущий используемый менеджер истории заданий.
        /// </summary>
        ICardTaskHistoryManager TaskHistoryManager { get; }

        /// <summary>
        /// Объект для работы с группами истории заданий.
        /// </summary>
        IKrTaskHistoryResolver TaskHistoryResolver { get; set; }

        /// <summary>
        /// Сериализатор этапов.
        /// </summary>
        IKrStageSerializer StageSerializer { get; set; }

        #endregion

        #region API

        /// <summary>
        /// Получить строго типизированную коллекцию строк из секции основной карточки.
        /// </summary>
        /// <param name="sectionName">Название коллекционной секции, присутствующей в основной карточке.</param>
        /// <returns>Список строк коллекционной секции.</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        ListStorage<CardRow> CardRows(
            string sectionName);

        /// <summary>
        /// Текущий выполняемый процесс является основным (KrProcess)
        /// </summary>
        /// <returns>
        /// <c>true</c>, если текущий процесс является основным KrProcess.
        /// <c>false</c>, если текущий процесс является вторичным KrSecondaryProcess.
        /// </returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        bool IsMainProcess();

        /// <summary>
        /// Основной процесс (KrProcess) для текущей карточки запущен.
        /// </summary>
        /// <returns>
        /// Признак того, что текущий процесс запущен для текущей карточки.
        /// </returns>
        /// <remarks>
        /// Актуально для следующих скриптов:
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Актуально для следующих режимов:
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        bool IsMainProcessStarted();

        /// <summary>
        /// Все этапы основного процесса (KrProcess) для текущей карточки находятся в состоянии <see cref="KrStageState.Inactive"/> .
        /// </summary>
        /// <returns>
        /// Признак того, что все этапы основного процесса (KrProcess) для текущей карточки неактивны.
        /// </returns>
        /// <remarks>
        /// Актуально для следующих скриптов:
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Актуально для следующих режимов:
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        bool IsMainProcessInactive();

        /// <summary>
        /// Выполнить этап в другом контексте, т.е. в рамках другой карточки.
        /// Процесс будет собран и выполнен как синхронный вторичный процесс.
        /// Если метод вызывается в Before (Инициализация), то контекст будет переключен для текущего этапа.
        /// Если метод вызывается в After (Постобработка), то контекст будет переключен для следующего этапа.
        /// </summary>
        /// <param name="cardID">Идентификатор карточки, в которой необходимо выполнить этап.</param>
        /// <param name="wholeCurrentGroup">
        /// Признак того, что в другой карточке необходимо выполнить все этапы до конца текущей группы
        /// </param>
        /// <param name="processInfo">
        /// Опциональный ProcessInfo для синхронного вторичного процесса.
        /// </param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        void RunNextStageInContext(
            Guid cardID,
            bool wholeCurrentGroup = false,
            IDictionary<string, object> processInfo = null);

        /// <summary>
        /// Смена контекста запланирована с помощью метода <see cref="RunNextStageInContext"/>
        /// </summary>
        /// <returns>
        /// Признак того, что смена контекста запланирована.
        /// </returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        bool ContextChangePending();

        /// <summary>
        /// Отменить смену контекста.
        /// </summary>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        void DoNotChangeContext();

        /// <summary>
        /// Получить из UnityContainer зависимость.
        /// </summary>
        /// <typeparam name="T">Тип запрашиваемой зависимости.</typeparam>
        /// <param name="name">Опциональное имя зависимости</param>
        /// <returns>
        /// Инстанцированный объект
        /// </returns>
        T Resolve<T>(
            string name = null);

        /// <summary>
        /// Вывести объект в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="obj">Выводимый объект.</param>
        void Show(
            object obj);

        /// <summary>
        /// Вывести сообщение(message) с уточнением(details) в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="message">Основной текст, отображаемый в списке объектов валидации.</param>
        /// <param name="details">Уточнение, доступное при просмотре объекта валидации.</param>
        void Show(
            string message,
            string details = "");

        /// <summary>
        /// Вывод информации об этапе в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="stage">Выводимый этап</param>
        void Show(
            Stage stage);

        /// <summary>
        /// Вывести информацию о нескольких этапах в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="stages">Перечисление этапов</param>
        void Show(
            IEnumerable<Stage> stages);

        /// <summary>
        /// Вывести информацию об исполнителе в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="performer">Исполнитель</param>
        void Show(
            Performer performer);

        /// <summary>
        /// Вывести информацию о нескольких исполнителях в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="performers">Перечисление исполнителей</param>
        void Show(
            IEnumerable<Performer> performers);

        /// <summary>
        /// Вывести содержимое словаря в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="storage"></param>
        void Show(
            IDictionary<string, object> storage);

        /// <summary>
        /// Вывести содержимое хранилища в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="storage"></param>
        void Show(
            IStorageDictionaryProvider storage);

        /// <summary>
        /// Добавить сообщение в ValidationResult с уровнем Error.
        /// </summary>
        /// <param name="text">Текст</param>
        void AddError(
            string text);

        /// <summary>
        /// Добавить сообщение в ValidationResult с уровнем Warning.
        /// </summary>
        /// <param name="text">Текст</param>
        void AddWarning(
            string text);

        /// <summary>
        /// Добавить сообщение в ValidationResult с уровнем Info.
        /// </summary>
        /// <param name="text">Текст</param>
        void AddInfo(
            string text);

        /// <summary>
        /// Выполнить действие над строкой (из коллекционной секции KrStages) этапа текущего процесса в обход объектной модели.
        /// Секция KrStages получается из ProcessHolder-сателлита.
        /// </summary>
        /// <param name="rowAction">Действие над строкой секции.</param>
        /// <param name="withNesteds">Учитывать этапы от вложенных маршрутов.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        void ForEachStage(
            Action<CardRow> rowAction,
            bool withNesteds = false);

        /// <summary>
        /// Выполнить действие над строкой (из коллекционной секции KrStages) этапа основного процесса карточки в обход объектной модели.
        /// Секция KrStages получается из контекстуального сателлита.
        /// </summary>
        /// <param name="rowAction">
        /// Действие над строкой секции
        /// </param>
        /// <param name="withNesteds">Учитывать этапы от вложенных маршрутов.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        void ForEachStageInMainProcess(
            Action<CardRow> rowAction,
            bool withNesteds = false);

        /// <summary>
        /// Установить состояние этапа в строке из коллекционной секции KrStages.
        /// </summary>
        /// <param name="stage">
        /// Строка этапа
        /// </param>
        /// <param name="stageStates">
        /// Состояние этапа
        /// </param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        void SetStageState(
            CardRow stage,
            KrStageState stageStates);

        /// <summary>
        /// Добавить новый этап в маршрут.
        /// Если этап уже добавлен, то найти и получить его из маршрута.
        /// </summary>
        /// <param name="name">Название этапа</param>
        /// <param name="descriptor">Дескриптор типа этапа</param>
        /// <param name="pos">
        /// Позиция, на которую необходимо вставить этап. По умолчанию этап добавляется в конец.
        /// </param>
        /// <returns>Новый этап</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        Stage GetOrAddStage(
            string name,
            StageTypeDescriptor descriptor,
            int pos = int.MaxValue);

        /// <summary>
        /// Добавить новый этап в маршрут.
        /// Если этап с таким именем уже добавлен, то вернуть null.
        /// </summary>
        /// <param name="name">Название этапа</param>
        /// <param name="descriptor">Дескриптор типа этапа</param>
        /// <param name="pos">
        /// Позиция, на которую необходимо вставить этап. По умолчанию этап добавляется в конец.
        /// </param>
        /// <returns>Новый этап</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        Stage AddStage(
            string name,
            StageTypeDescriptor descriptor,
            int pos = int.MaxValue);

        /// <summary>
        /// Удалить этап из маршрута, добавленный ранее в скриптах.
        /// </summary>
        /// <param name="name">
        /// Название удаляемого маршрута
        /// </param>
        /// <returns>
        /// Признак того, что этап успешно удален.
        /// </returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        bool RemoveStage(
            string name);

        /// <summary>
        /// Установить исполнителя для этапа с режимом одиночного исполнителя <see cref="PerformerUsageMode.Single"/>.
        /// </summary>
        /// <param name="id">ID роли исполнителя</param>
        /// <param name="name">Название роли исполнителя</param>
        /// <param name="intoStage">Этап, в который необходимо добавить исполнителя</param>
        /// <param name="ignoreManualChanges">Добавить исполнителя, даже если этап изменен пользователем.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        void SetSinglePerformer(
            Guid id,
            string name,
            Stage intoStage,
            bool ignoreManualChanges = false);

        /// <summary>
        /// Установить исполнителя для этапа с режимом одиночного исполнителя <see cref="PerformerUsageMode.Single"/>.
        /// </summary>
        /// <param name="id">ID роли исполнителя</param>
        /// <param name="name">Название роли исполнителя</param>
        /// <param name="intoStage">Этап, в который необходимо добавить исполнителя</param>
        /// <param name="ignoreManualChanges">Добавить исполнителя, даже если этап изменен пользователем.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        void SetSinglePerformer(
            string id,
            string name,
            Stage intoStage,
            bool ignoreManualChanges = false);
        
        /// <summary>
        /// Установить исполнителя для этапа с режимом одиночного исполнителя <see cref="PerformerUsageMode.Single"/>.
        /// </summary>
        /// <param name="stage">Этап, в котором необходимо сбросить исполнителя</param>
        /// <param name="ignoreManualChanges">Сбросить исполнителя, даже если этап изменен пользователем.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        void ResetSinglePerformer(
            Stage stage,
            bool ignoreManualChanges = false);
        
        /// <summary>
        /// Добавить исполнителя для этапа с режимом множественных исполнителей <see cref="PerformerUsageMode.Multiple"/>
        /// Исполнитель будет добавлен только если на указанном месте для вставки стоит другой исполнитель.
        /// </summary> 
        /// <param name="id">ID роли исполнителя</param>
        /// <param name="name">Название роли исполнителя</param>
        /// <param name="intoStage">Этап, в который необходимо добавить исполнителя</param>
        /// <param name="pos">
        /// Позиция, на которую необходимо вставить этап. По-умолчанию этап добавляется в конец
        /// </param>
        /// <param name="ignoreManualChanges">Добавить исполнителя, даже если этап изменен пользователем.</param>
        /// <returns>Добавленный исполнитель или <c>null</c>, если исполнитель не был добавлен</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        Performer AddPerformer(
            Guid id,
            string name,
            Stage intoStage,
            int pos = int.MaxValue,
            bool ignoreManualChanges = false);

        /// <summary>
        /// Добавить исполнителя для этапа с режимом множественных исполнителей <see cref="PerformerUsageMode.Multiple"/>
        /// Исполнитель будет добавлен только если на указанном месте для вставки стоит другой исполнитель.
        /// </summary> 
        /// <param name="id">ID роли исполнителя</param>
        /// <param name="name">Название роли исполнителя</param>
        /// <param name="intoStage">Этап, в который необходимо добавить исполнителя</param>
        /// <param name="pos">
        /// Позиция, на которую необходимо вставить этап. По-умолчанию этап добавляется в конец
        /// </param>
        /// <param name="ignoreManualChanges">Добавить исполнителя, даже если этап изменен пользователем.</param>
        /// <returns>Добавленный исполнитель или <c>null</c>, если исполнитель не был добавлен</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        Performer AddPerformer(
            string id,
            string name,
            Stage intoStage,
            int pos = int.MaxValue,
            bool ignoreManualChanges = false);

        /// <summary>
        /// Удалить исполнителя по роли для этапа с режимом множественных исполнителей <see cref="PerformerUsageMode.Multiple"/>
        /// </summary> 
        /// <param name="performerID">ID роли исполнителя</param>
        /// <param name="stage">Этап, в котором необходимо удалить исполнителя</param>
        /// <param name="ignoreManualChanges">Добавить исполнителя, даже если этап изменен пользователем.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        void RemovePerformer(
            Guid performerID,
            Stage stage,
            bool ignoreManualChanges = false);
        
        /// <summary>
        /// Удалить исполнителя по роли для этапа с режимом множественных исполнителей <see cref="PerformerUsageMode.Multiple"/>
        /// </summary> 
        /// <param name="performerID">ID роли исполнителя</param>
        /// <param name="stage">Этап, в котором необходимо удалить исполнителя</param>
        /// <param name="ignoreManualChanges">Добавить исполнителя, даже если этап изменен пользователем.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        void RemovePerformer(
            string performerID,
            Stage stage,
            bool ignoreManualChanges = false);
        
        /// <summary>
        /// Удалить исполнителя по роли для этапа с режимом множественных исполнителей <see cref="PerformerUsageMode.Multiple"/>
        /// </summary> 
        /// <param name="index">Индекс для удаления</param>
        /// <param name="stage">Этап, в который необходимо добавить исполнителя</param>
        /// <param name="ignoreManualChanges">Добавить исполнителя, даже если этап изменен пользователем.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Глобальный;<para />
        /// * Локальный;<para />
        /// </remarks>
        void RemovePerformer(
            int index,
            Stage stage,
            bool ignoreManualChanges = false);
        
        /// <summary>
        /// Добавление записи в историю действий в текущую группу истории заданий.
        /// </summary>
        /// <param name="typeID">Идентификатор типа задания</param>
        /// <param name="typeName">Название типа задания</param>
        /// <param name="typeCaption">Отображаемое название типа задания</param>
        /// <param name="optionID">Вариант завершения</param>
        /// <param name="result"></param>
        /// <param name="performerID">Идентификатор роли автора/роли/исполнителя.</param>
        /// <param name="performerName">Имя роли автора/роли/исполнителя.</param>
        /// <param name="cycle">Опционально: номер цикла. Если не указать, будет взят текущий номер цикла.</param>
        /// <param name="timeZoneID">ID временной зоны</param>
        /// <param name="timeZoneUTCOffset">Смещение временной зоны</param>
        /// <param name="modifyAction">Функция для дополнения значений записи в истории.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        void AddTaskHistoryRecord(
            Guid typeID,
            string typeName,
            string typeCaption,
            Guid optionID,
            string result = null,
            Guid? performerID = null,
            string performerName = null,
            int? cycle = null,
            int? timeZoneID = null,
            TimeSpan? timeZoneUTCOffset = null,
            Action<CardTaskHistoryItem> modifyAction = null);

        /// <summary>
        /// Добавление записи в историю действий в указанную группу истории заданий.
        /// </summary>
        /// <param name="taskHistoryGroup">Идентификатор группы истории заданий</param>
        /// <param name="typeID">Идентификатор типа задания</param>
        /// <param name="typeName">Название типа задания</param>
        /// <param name="typeCaption">Отображаемое название типа задания</param>
        /// <param name="optionID">Вариант завершения</param>
        /// <param name="result"></param>
        /// <param name="performerID">Идентификатор роли автора/роли/исполнителя.</param>
        /// <param name="performerName">Имя роли автора/роли/исполнителя.</param>
        /// <param name="cycle">Опционально: номер цикла. Если не указать, будет взят текущий номер цикла.</param>
        /// <param name="timeZoneID">ID временной зоны</param>
        /// <param name="timeZoneUTCOffset">Смещение временной зоны</param>
        /// <param name="modifyAction">Функция для дополнения значений записи в истории.</param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        void AddTaskHistoryRecord(
            Guid? taskHistoryGroup,
            Guid typeID,
            string typeName,
            string typeCaption,
            Guid optionID,
            string result = null,
            Guid? performerID = null,
            string performerName = null,
            int? cycle = null,
            int? timeZoneID = null,
            TimeSpan? timeZoneUTCOffset = null,
            Action<CardTaskHistoryItem> modifyAction = null);

        /// <summary>
        /// Получение группы истории заданий
        /// </summary>
        /// <param name="groupTypeID">Идентификатор типа группы истории заданий</param>
        /// <param name="parentGroupTypeID">Тип родительской группы истории заданий</param>
        /// <param name="newIteration">Явное создание новой итерации</param>
        /// <returns>Группа истории заданий</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        CardTaskHistoryGroup ResolveTaskHistoryGroup(
            Guid groupTypeID,
            Guid? parentGroupTypeID = null,
            bool newIteration = false);

        /// <summary>
        /// Проверка настроек типового решения для текущей карточки
        /// </summary>
        /// <param name="components">Требуемые компоненты</param>
        /// <returns>Все указанные компоненты поддерживаются</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        bool HasKrComponents(
            KrComponents components);

        /// <summary>
        /// Проверка настроек типового решения для текущей карточки
        /// </summary>
        /// <param name="components">Требуемые компоненты</param>
        /// <returns>Все указанные компоненты поддерживаются</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        bool HasKrComponents(
            params KrComponents[] components);

        /// <summary>
        /// Получение хранилища Info для основного процесса карточки.
        /// </summary>
        /// <param name="mainCardID">
        /// Карточка, инфо основного процесса которой необходимо получить. 
        /// Если <c>null</c>, тогда используется текущая карточка.</param>
        /// <returns>Инфо основного процесса</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        ISerializableObject GetPrimaryProcessInfo(
            Guid? mainCardID = null);

        /// <summary>
        /// Получение хранилища Info для вторичного процесса карточки.
        /// </summary>
        /// <param name="secondaryProcessID">
        /// Идентификатор вторичного процесса
        /// </param>
        /// <param name="cardID">
        /// Карточка, инфо процесса которой необходимо получить. 
        /// Если <c>null</c>, тогда используется текущая карточка.</param>
        /// <returns>Инфо вторичного процесса</returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// </remarks>
        ISerializableObject GetSecondaryProcessInfo(
            Guid secondaryProcessID,
            Guid? cardID = null);

        /// <summary>
        /// Вызвать дополнительный метод, приложенный к текущему типу скрипта.
        /// </summary>
        /// <param name="name">Название дополнительного метода</param>
        /// <param name="context">Контекст для дополнительного метода</param>
        /// <param name="throwOnError">
        /// Выбрасывать исключение при возниковении ошибки
        /// Если стоит <c>false</c>, то при попытке выполнить отсутствующий метод ничего не произойдет.
        /// <c>true</c> рекомендуется для скриптов, которые создаются вместе с типом этапа.
        /// <c>false</c> необходимо использовать в том случае, когда этап существовал ранее, а скрипт добавляется в
        /// уже существующий тип этапа.
        /// </param>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// * Глобальный;<para />
        /// </remarks>
        void InvokeExtra(
            string name,
            object context,
            bool throwOnError = true);
        
        /// <summary>
        /// Вызвать дополнительный метод, приложенный к текущему типу скрипта и получить его результат.
        /// </summary>
        /// <param name="name">Название дополнительного метода</param>
        /// <param name="context">Контекст для дополнительного метода</param>
        /// <param name="throwOnError">
        /// Выбрасывать исключение при возниковении ошибки
        /// Если стоит <c>false</c>, то при попытке выполнить отсутствующий метод ничего не произойдет.
        /// <c>true</c> рекомендуется для скриптов, которые создаются вместе с типом этапа.
        /// <c>false</c> необходимо использовать в том случае, когда этап существовал ранее, а скрипт добавляется в
        /// уже существующий тип этапа.
        /// </param>
        /// <typeparam name="T">Тип возвращаемого значения</typeparam>
        /// <returns>
        /// Результат выполнения метода.
        /// </returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// * Скрипт построения шаблона этапов;<para />
        /// * Скрипт построения группы этапов;<para />
        /// * Скрипт выполнения группы этапов;<para />
        /// * Скрипт видимости кнопки процесса;<para />
        /// * Скрипт выполнения процесса;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// * Глобальный;<para />
        /// </remarks>
        T InvokeExtra<T>(
            string name,
            object context,
            bool throwOnError = true);

        /// <summary>
        /// Получить карточку из Info этапа по ключу <see cref="KrConstants.Keys.NewCard"/>.
        /// </summary>
        /// <returns></returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// * Глобальный;<para />
        /// </remarks>
        Card GetNewCard();

        /// <summary>
        /// Получить Info для ветки вторичного процесса перед стартом.
        /// Актуально только для этапа ветвления.
        /// </summary>
        /// <param name="rowID">
        /// Идентификатор строки RowID в списке вторичных процессов KrForkSecondaryProcessesSettingsVirtual_Synthetic.
        /// </param>
        /// <returns></returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// * Глобальный;<para />
        /// </remarks>
        IDictionary<string, object> GetProcessInfoForBranch(
            Guid rowID);

        /// <summary>
        /// Получить Info для ветки вторичного процесса перед стартом.
        /// Актуально только для этапа ветвления.
        /// </summary>
        /// <param name="rowID">
        /// Идентификатор строки RowID в списке вторичных процессов KrForkSecondaryProcessesSettingsVirtual_Synthetic.
        /// </param>
        /// <returns></returns>
        /// <remarks>
        /// Поддеживаемые скрипты: <para />
        /// * Скрипт выполнения этапа;<para />
        /// Поддерживаемые режимы:<para />
        /// * Синхронный режим;<para />
        /// * Асинхронный режим;<para />
        /// Поддерживаемые контексты запуска:<para />
        /// * Локальный;<para />
        /// * Глобальный;<para />
        /// </remarks>
        IDictionary<string, object> GetProcessInfoForBranch(
            string rowID);

        #endregion
    }
}
